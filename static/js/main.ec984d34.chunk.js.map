{"version":3,"sources":["components/searchbar/searchbar.component.jsx","components/jumbotron/jumbotron.component.jsx","components/image-card/image-card.component.jsx","components/image-list/image-list.component.jsx","components/spinner/spinner.component.jsx","App.js","reportWebVitals.js","index.js"],"names":["SearchBar","handleClick","useState","searchString","setSearchString","className","onSubmit","e","InputGroup","FormControl","type","placeholder","onChange","target","value","Append","Button","variant","onClick","JumbotronComponent","Jumbotron","fluid","ImageCard","hardCodeDivisor","regular","urls","width","height","alt_description","likes","user","name","portfolio_url","medium","profile_image","download","links","grid","document","getElementsByClassName","gridCol","clientWidth","parseInt","window","getComputedStyle","getPropertyValue","rowGap","rowHeight","rowSpan","Math","ceil","downloadLink","Card","style","display","gridRowEnd","Image","alt","src","href","rel","class","ImageList","images","Container","map","image","index","id","SpinnerComponent","loading","Spinner","animation","role","clientID","process","App","setLoading","setImages","size","setSize","useLayoutEffect","updateSize","innerWidth","innerHeight","addEventListener","removeEventListener","useWindowSize","page","setPage","useEffect","updatePage","scrollY","body","scrollHeight","oldPage","usePage","fetchImageList","a","url","URLSearchParams","query","per_page","client_id","console","log","count","fetch","then","response","json","result","data","results","searchValue","preventDefault","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.ec984d34.chunk.js","sourcesContent":["import {useState } from 'react';\nimport { FormControl, \n         Button, \n         InputGroup } from 'react-bootstrap';\n\n\nconst SearchBar = ({handleClick}) => {\n    const [searchString, setSearchString] =useState(\"\")\n    return (\n        <div className=\"search-bar\">\n            <form onSubmit={(e)=> handleClick(e, searchString)}>\n                <InputGroup>\n                    <FormControl type=\"text\" placeholder=\"Search\" onChange={(e) => setSearchString(e.target.value)}>\n                    </FormControl>\n                    <InputGroup.Append>\n                        <Button variant=\"primary\" type=\"submit\" onClick={null}>Go!</Button>\n                    </InputGroup.Append>\n                </InputGroup>\n            </form>\n        </div>\n    )\n}\n\nexport default SearchBar\n","import { Jumbotron } from 'react-bootstrap'\nimport SearchBar from '../searchbar/searchbar.component';\n\n//scss\nimport './jumbotron.styles.scss'\nconst JumbotronComponent = ({handleClick}) => {\n    return (\n        <Jumbotron className=\"jumbotron\" fluid>\n            <h1>Image Gallery</h1>\n            <p>Search and download high-quality free images from the internet.</p>\n            <br/>\n            <SearchBar \n                handleClick={handleClick}\n            />\n\n        </Jumbotron>\n    )\n}\n\nexport default JumbotronComponent\n","\nimport {Card , Image, Button} from 'react-bootstrap';\n//scss\nimport './image-card.styles.scss'\n\nconst ImageCard = (\n    {\n        urls: { regular },\n        width,\n        height,\n        alt_description,\n        likes,\n        user: {\n        name,\n        portfolio_url,\n        profile_image: { medium },\n        },\n        links: { download },\n    }\n    ) => {\n\n    // const [rowGap1, rowHeight1] = useWindowSize();\n    // console.log(rowGap1, rowHeight1)\n    const grid = document.getElementsByClassName(\"image-list\")[0]\n    const imageListWidth = grid.clientWidth\n    const gridCol = parseInt(window.getComputedStyle(grid).getPropertyValue(\"grid-template-columns\"))\n    const rowGap = parseInt(window.getComputedStyle(grid).getPropertyValue(\"grid-row-gap\"))\n\tconst rowHeight = parseInt(window.getComputedStyle(grid).getPropertyValue(\"grid-auto-rows\"))\n\n    let hardCodeDivisor;\n    if (gridCol >= 265){\n        hardCodeDivisor = 4;\n    } else {\n        hardCodeDivisor = 4.9;\n    }\n\n    let rowSpan = Math.ceil((((height * 1080) / width / hardCodeDivisor) + (rowGap/2)) / (rowHeight + rowGap)) \n    const downloadLink = `${download}?force=true`;\n    return (\n        <Card className = \"image-card\"\n            style={{display: \"block\", gridRowEnd:`span ${rowSpan}`}}>\n            <Image className=\"image-card-img\" alt={alt_description} src={regular} fluid/>\n            <div className= \"photo-info\">\n                <div>\n                    <h6>{name}</h6>\n                    <p className=\"mb-0\">{likes} likes </p>\n                    <a\n                    className=\"h6\"\n                    href={downloadLink}\n                    download\n                    target=\"_blank\"\n                    rel=\"noreferrer\"\n                    >\n                    <i class=\"fas fa-download text-white\"></i>\n                    </a>\n                </div>\n                <a href={portfolio_url}>\n                    <img src={medium} alt=\"\" className=\"user-img\" />\n                </a>\n            </div>\n        </Card>\n    )\n}\n\nexport default ImageCard\n","\nimport ImageCard from '../image-card/image-card.component';\n\nimport {Container, Row, Col , Card} from 'react-bootstrap'\n\n\nconst ImageList = ({images}) => {\n    return (\n        <Container className=\"image-list\">\n            {\n                images.map((image, index) => (\n                    <ImageCard key={image.id + `${index}`} \n                        {...image}/>\n                ))\n            }\n        </Container>\n    )\n}\n\nexport default ImageList\n","import {Spinner} from 'react-bootstrap';\nimport \"./spinner.styles.scss\";\nconst SpinnerComponent = ({loading}) => {\n    return (\n        <div \n            className=\"spinner\"\n            style={{\n                display: loading === true ? \"block\" : \"none\",\n            }}\n            >\n            <Spinner \n                animation=\"border\" \n                variant=\"primary\"\n                role=\"status\"\n            />    \n        </div>\n    )\n}\n\nexport default SpinnerComponent\n","import JumbotronComponent from './components/jumbotron/jumbotron.component';\nimport NavbarComponent from \"./components/navbar/navbar.component\";\nimport ImageList from \"./components/image-list/image-list.component\";\nimport SpinnerComponent from './components/spinner/spinner.component';\n\nimport {useState, useEffect , useLayoutEffect} from 'react';\n\nimport React from 'react';\n\n// const mainURL = `https://api.unsplash.com/photos/`;\n// const searchURL = `https://api.unsplash.com/search/photos/`;\n\nconst mainURL = \"https://api.unsplash.com/photos/random\";\nconst searchURL = \"https://api.unsplash.com/search/photos\";\nconst clientID = process.env.REACT_APP_apiKey;\nconst DEFAULT_IMAGE_COUNT = 25;\nconst IMAGE_INCREMENT_COUNT = 10;\n\n\nconst App = () => {\n  const [loading, setLoading] = useState(false)\n  const [images, setImages] =useState([])\n  const [searchString, setSearchString] =useState(null)\n  // Custom hooks output\n  const [width, height] = useWindowSize();\n  const [page, setPage]= usePage();\n\n\n  useEffect(()=>{\n    if (page <= 3){\n      fetchImageList()\n    }\n  }, [page, searchString])\n\n  useEffect(() => {\n\n  })\n\n\n  const fetchImageList = async() =>{\n    setLoading(true);\n\n    // const pageURL = `&page=${page}`;\n    // const queryURL = `&query=${query}`;\n    let url;\n    if (searchString){\n      url = `${searchURL}?` + new URLSearchParams({\n        page: page,\n        query: searchString,\n        per_page: DEFAULT_IMAGE_COUNT,\n        client_id: clientID,\n      })\n      console.log(url)\n      \n    } else {\n      url = `${mainURL}?` + new URLSearchParams({\n        count: DEFAULT_IMAGE_COUNT,\n        client_id: clientID,\n      })\n    }\n\n    console.log(url)\n    const result = await fetch(url)\n      .then(response => response.json())\n      .then(result => result)\n\n    const data = searchString ? result.results : result\n\n    setImages([...images, ...data ])\n    setLoading(false);\n    // console.log(result)\n      console.log(page)\n  }\n\n  const submitSearchValue = (e, searchValue) =>{\n    e.preventDefault()\n    if (searchValue == \"\") {\n      searchValue = null;\n    }\n    setImages([])\n    setPage(1)\n    setSearchString(searchValue)\n    console.log(\"submit\", searchValue)\n  }\n\n  return (\n    <div className=\"App\">\n      {/*<NavbarComponent/>*/}\n      <JumbotronComponent \n        handleClick = {submitSearchValue}\n      />\n      <ImageList images={images}/>\n      <SpinnerComponent loading={loading}/>\n    </div>\n  )\n}\n\n// Custom Hooks\n// Get Windows Size\nfunction useWindowSize() {\n    const [size, setSize] = useState([0, 0]);\n    useLayoutEffect(() => {\n\n      function updateSize() {\n        setSize([\n                window.innerWidth,\n                window.innerHeight\n                ]);\n      }\n\n      window.addEventListener('resize', updateSize);\n      updateSize();\n      return () => window.removeEventListener('resize', updateSize);\n    }, []);\n    return size;\n}\n\nfunction usePage(){\n  const [page, setPage] = useState(1);\n  useEffect(() => {\n    function updatePage(){\n      const windowScrollHeight = window.innerHeight + window.scrollY\n      const documentBodyHeight = document.body.scrollHeight \n      if ( windowScrollHeight >= documentBodyHeight){\n        // console.log(\"positive\",windowScrollHeight, documentBodyHeight -2 )\n        setPage((oldPage) => {\n          return oldPage + 1;\n        })\n      }\n    }\n    \n    window.addEventListener(\"scroll\", updatePage);\n    return () => window.removeEventListener(\"scroll\", updatePage);\n  }, []);\n  return [page, setPage];\n}\n\n\n\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\n// bootstrap css\nimport 'bootstrap/dist/css/bootstrap.min.css'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}